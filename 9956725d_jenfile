pipeline {
    agent any

    stages {
        stage('9956725d_OP_S1') {
            steps {
                echo 'Stage 1: Commit Docker image and execute the script on UAT web server'
                script {
                    // Commit docker image
                    sh 'docker commit 9956725d_uatsvr 9956725d_uatsvr_image'

                    // Copy script file into the container (if needed)
                    sh 'docker cp ./9956725d_script 9956725d_uatsvr:/tmp/9956725d_script'

                    // Run the script inside the container
                    sh 'docker exec 9956725d_uatsvr /bin/bash /tmp/9956725d_script'
                }
                echo 'Stage 1: UAT web server updated'
            }
        }

        stage('9956725d_OP_S2') {
            steps {
                echo 'Stage 2: Verify UAT server is running'
                script {
                    sh '''
                    curl -Is http://192.168.120.130 | head -n 1 > /tmp/uatsvr-result-file
                    if grep -q "HTTP/1.1 200 OK" /tmp/uatsvr-result-file; then
                        echo "9956725d_OP_S2: UAT server is running"
                    else
                        echo "9956725d_OP_S2: UAT server fails"
                        exit 1
                    fi
                    '''
                }
            }
        }

        stage('9956725d_OP_S3') {
            steps {
                echo 'Stage 3: Prompt for UAT stress test'
                input message: 'Proceed with stress test on UAT web server?', ok: 'Yes'
            }
        }

        stage('9956725d_OP_S4') {
            steps {
                echo 'Stage 4: Verify UAT stress test results'
                echo "9956725d_OP_S4: Stress test result is good"
            }
        }

        stage('9956725d_OP_S5') {
            steps {
                echo 'Stage 5: Prompt for deployment to PROD web server'
                input message: 'Proceed to update PROD web server?', ok: 'Yes'
            }
        }

        stage('9956725d_OP_S6') {
            steps {
                echo 'Stage 6: Create a backup image and update PROD web server'
                script {
                    sh '''
                    docker commit 9956725d_prodsvr 9956725d_prodsvr_image
                    ./9956725d_script
                    '''
                }
                echo "9956725d_OP_S6: PROD web server is backup and updated"
            }
        }

        stage('9956725d_OP_S7') {
            steps {
                echo 'Stage 7: Verify PROD server and prompt for actions if issues occur'
                script {
                    sh '''
                    curl -Is http://192.168.120.140 | head -n 1 > /tmp/prodsvr-result-file
                    if grep -q "HTTP/1.1 200 OK" /tmp/prodsvr-result-file; then
                        echo "9956725d_OP_S7: Production website is operational"
                    else
                        input message: 'Choose next action:',
                              parameters: [choice(name: 'Action', choices: ['Trigger roll back', 'Troubleshooting'], description: 'Select an action')]
                    fi
                    '''
                }
            }
        }
    }
}
